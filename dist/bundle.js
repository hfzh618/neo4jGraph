!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";t.exports=function(t){return null!==t&&"object"==typeof t}},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))(function(o,i){function s(t){try{a(r.next(t))}catch(t){i(t)}}function u(t){try{a(r.throw(t))}catch(t){i(t)}}function a(t){t.done?o(t.value):new n(function(e){e(t.value)}).then(s,u)}a((r=r.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(o=(o=s.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){s.label=i[1];break}if(6===i[0]&&s.label<o[1]){s.label=o[1],o=i;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(i);break}o[2]&&s.ops.pop(),s.trys.pop();continue}i=e.call(t,s)}catch(t){i=[6,t],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}},i=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});var s,u=i(n(2));function a(){document.getElementById("neo4jd3").innerHTML="",s=new Neo4jd3("#neo4jd3",{highlight:[],icons:{Contributor:"user",Fund:"money",Project:"database"},images:{Contributor:"https://eisman.github.io/neo4jd3/img/twemoji/1f38f.svg",Project:"https://eisman.github.io/neo4jd3/img/twemoji/1f5c3.svg"},minCollision:60,neo4jData:{results:[],errors:[]},nodeRadius:30,onNodeDoubleClick:R,onRelationshipDoubleClick:D,zoomFit:!1})}var c="http://localhost:8081",h=[];function l(t){return r(this,void 0,void 0,function(){var e,n;return o(this,function(r){switch(r.label){case 0:return(e=h.find(function(e){return e.id===t}))?[2,e]:[3,1];case 1:return[4,f(t)];case 2:return n=r.sent(),h.push(n),[2,n]}})})}function f(t){return r(this,void 0,void 0,function(){return o(this,function(e){switch(e.label){case 0:return[4,u.default.get(c+"/neo4j/node/contributor/"+t).then(function(t){var e=t.body;return{id:e.id,name:e.name,number:e.number,invests:e.invests.map(function(t){return t.id})}})];case 1:return[2,e.sent()]}})})}function p(t){return{id:t.id.toString(),labels:["Contributor"],properties:{name:t.name}}}var d=[];function y(t){return r(this,void 0,void 0,function(){var e,n;return o(this,function(r){switch(r.label){case 0:return(e=d.find(function(e){return e.id===t}))?[2,e]:[3,1];case 1:return[4,m(t)];case 2:return n=r.sent(),d.push(n),[2,n]}})})}function m(t){return r(this,void 0,void 0,function(){return o(this,function(e){switch(e.label){case 0:return[4,u.default.get(c+"/neo4j/node/fund/"+t).then(function(t){var e=t.body;return{id:e.id,name:e.name,number:e.number,invests:e.invests.map(function(t){return t.id}),contains:e.contains.map(function(t){return t.id})}})];case 1:return[2,e.sent()]}})})}function b(t){return{id:t.id.toString(),labels:["Fund"],properties:{name:t.name}}}var _=[];function g(t){return r(this,void 0,void 0,function(){var e,n;return o(this,function(r){switch(r.label){case 0:return(e=_.find(function(e){return e.id===t}))?[2,e]:[3,1];case 1:return[4,w(t)];case 2:return n=r.sent(),_.push(n),[2,n]}})})}function w(t){return r(this,void 0,void 0,function(){return o(this,function(e){switch(e.label){case 0:return[4,u.default.get(c+"/neo4j/node/project/"+t).then(function(t){var e=t.body;return{id:e.id,name:e.name,number:e.number,contains:e.contains.map(function(t){return t.id})}})];case 1:return[2,e.sent()]}})})}function v(t){return{id:t.id.toString(),labels:["Project"],properties:{name:t.name}}}var T=[];function x(t){return r(this,void 0,void 0,function(){var e,n;return o(this,function(r){switch(r.label){case 0:return(e=T.find(function(e){return e.id===t}))?[2,e]:[3,1];case 1:return[4,E(t)];case 2:return n=r.sent(),T.push(n),[2,n]}})})}function E(t){return r(this,void 0,void 0,function(){var e=this;return o(this,function(n){switch(n.label){case 0:return[4,u.default.get(c+"/neo4j/relationship/fund-project/"+t).then(function(t){return r(e,void 0,void 0,function(){var e;return o(this,function(n){return[2,{id:(e=t.body).id,name:e.name,fund:e.fund.id,project:e.project.id}]})})})];case 1:return[2,n.sent()]}})})}function k(t){return{id:t.id.toString(),type:"contains",startNode:t.fund.id.toString(),endNode:t.project.id.toString(),source:t.fund.id.toString(),target:t.project.id.toString(),properties:{name:t.name},linknum:1}}var j=[];function P(t){return r(this,void 0,void 0,function(){var e,n;return o(this,function(r){switch(r.label){case 0:return(e=j.find(function(e){return e.id===t}))?[2,e]:[3,1];case 1:return[4,O(t)];case 2:return n=r.sent(),j.push(n),[2,n]}})})}function O(t){return r(this,void 0,void 0,function(){var e=this;return o(this,function(n){switch(n.label){case 0:return[4,u.default.get(c+"/neo4j/relationship/contributor-fund/"+t).then(function(t){return r(e,void 0,void 0,function(){var e;return o(this,function(n){return[2,{id:(e=t.body).id,name:e.name,fund:e.fund.id,contributor:e.contributor.id}]})})})];case 1:return[2,n.sent()]}})})}function C(t,e){return{id:t.id.toString(),type:"invest",startNode:t.contributor.id.toString(),endNode:t.fund.id.toString(),source:t.contributor.id.toString(),target:t.fund.id.toString(),properties:{name:t.name},linknum:e}}function S(t){return r(this,void 0,void 0,function(){var e,n,r,i,u,c;return o(this,function(o){switch(o.label){case 0:return[4,y(t)];case 1:for(e=o.sent(),n=[],r=function(t){if("number"==typeof e.contains[t]){var r=e.contains[t];n.push(new Promise(function(n){x(r).then(function(r){e.contains[t]=r,n()})}))}},u=0;u<e.contains.length;u++)r(u);for(i=function(t){if("number"==typeof e.invests[t]){var r=e.invests[t];n.push(new Promise(function(n){P(r).then(function(r){e.invests[t]=r,n()})}))}},u=0;u<e.invests.length;u++)i(u);return[4,Promise.all(n)];case 2:return o.sent(),n=[],e.contains.forEach(function(t){if(t.fund=e,"number"==typeof t.project){var r=t.project;n.push(new Promise(function(e){g(r).then(function(n){t.project=n,e()})}))}}),e.invests.forEach(function(t){if(t.fund=e,"number"==typeof t.contributor){var r=t.contributor;n.push(new Promise(function(e){l(r).then(function(n){t.contributor=n,e()})}))}}),[4,Promise.all(n)];case 3:return o.sent(),console.log(e),(c={nodes:[],relationships:[]}).nodes.push(b(e)),e.invests.forEach(function(t){var n=e.invests.filter(function(e){var n=e.contributor.id===t.contributor.id,r=e.fund.id===t.fund.id;return n&&r}).length;c.relationships.push(C(t,n)),-1===c.nodes.findIndex(function(e){return e.id===t.contributor.id.toString()})&&c.nodes.push(p(t.contributor))}),e.contains.forEach(function(t){c.relationships.push(k(t)),-1===c.nodes.findIndex(function(e){return e.id===t.project.id.toString()})&&c.nodes.push(v(t.project))}),console.log(c),a(),s.replaceWithD3Data(c),[2]}})})}function R(t){console.log(t),console.log("clicked");var e=parseInt(t.id),n=h.find(function(t){return t.id===e}),i=d.find(function(t){return t.id===e}),u=_.find(function(t){return t.id===e});n?(console.log("prepare contributor"),function(t){return r(this,void 0,void 0,function(){var e,n,r,i,u;return o(this,function(o){switch(o.label){case 0:return[4,l(t)];case 1:for(e=o.sent(),n=[],r=function(t){if("number"==typeof e.invests[t]){var r=e.invests[t];n.push(new Promise(function(n){P(r).then(function(r){e.invests[t]=r,n()})}))}},i=0;i<e.invests.length;i++)r(i);return[4,Promise.all(n)];case 2:return o.sent(),n=[],e.invests.forEach(function(t){if(t.contributor=e,"number"==typeof t.fund){var r=t.fund;n.push(new Promise(function(e){y(r).then(function(n){t.fund=n,e()})}))}}),[4,Promise.all(n)];case 3:return o.sent(),console.log(e),(u={nodes:[],relationships:[]}).nodes.push(p(e)),e.invests.forEach(function(t){var n=e.invests.filter(function(e){var n=e.contributor.id===t.contributor.id,r=e.fund.id===t.fund.id;return n&&r}).length;u.relationships.push(C(t,n)),-1===u.nodes.findIndex(function(e){return e.id===t.fund.id.toString()})&&u.nodes.push(b(t.fund))}),console.log(u),a(),s.replaceWithD3Data(u),[2]}})})}(e).then(function(){return console.log("contributor shown")})):i?(console.log("prepare fund"),S(e).then(function(){return console.log("fund shown")})):u&&(console.log("prepare project"),function(t){return r(this,void 0,void 0,function(){var e,n,r,i,u;return o(this,function(o){switch(o.label){case 0:return[4,g(t)];case 1:for(e=o.sent(),n=[],r=function(t){if("number"==typeof e.contains[t]){var r=e.contains[t];n.push(new Promise(function(n){x(r).then(function(r){e.contains[t]=r,n()})}))}},i=0;i<e.contains.length;i++)r(i);return[4,Promise.all(n)];case 2:return o.sent(),n=[],e.contains.forEach(function(t){if(t.project=e,"number"==typeof t.fund){var r=t.fund;n.push(new Promise(function(e){y(r).then(function(n){t.fund=n,e()})}))}}),[4,Promise.all(n)];case 3:return o.sent(),console.log(e),(u={nodes:[],relationships:[]}).nodes.push(v(e)),e.contains.forEach(function(t){u.relationships.push(k(t)),-1===u.nodes.findIndex(function(e){return e.id===t.fund.id.toString()})&&u.nodes.push(b(t.fund))}),console.log(u),a(),s.replaceWithD3Data(u),[2]}})})}(e).then(function(){return console.log("project shown")}))}function D(t){console.log("double click on relationship: "+JSON.stringify(t))}document.getElementById("search-fund-button").onclick=function(){var t=document.getElementById("search-fund-input").value;0===t.length?alert("请输入搜索内容43gbg！"):u.default.get(c+"/neo4j/node/fund/findOne?key="+t).then(function(t){var e=t.body.id;y(e).then(function(){return S(e)})})},S(101).then(function(){return console.log("shown")})},function(t,e,n){let r;"undefined"!=typeof window?r=window:"undefined"!=typeof self?r=self:(console.warn("Using browser-only version of superagent in non-browser environment"),r=this);const o=n(3),i=n(4),s=n(0),u=n(5),a=n(7);function c(){}const h=e=t.exports=function(t,n){return"function"==typeof n?new e.Request("GET",t).end(n):1==arguments.length?new e.Request("GET",t):new e.Request(t,n)};e.Request=b,h.getXHR=(()=>{if(!(!r.XMLHttpRequest||r.location&&"file:"==r.location.protocol&&r.ActiveXObject))return new XMLHttpRequest;try{return new ActiveXObject("Microsoft.XMLHTTP")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.6.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP.3.0")}catch(t){}try{return new ActiveXObject("Msxml2.XMLHTTP")}catch(t){}throw Error("Browser-only version of superagent could not find XHR")});const l="".trim?t=>t.trim():t=>t.replace(/(^\s*|\s*$)/g,"");function f(t){if(!s(t))return t;const e=[];for(const n in t)p(e,n,t[n]);return e.join("&")}function p(t,e,n){if(null!=n)if(Array.isArray(n))n.forEach(n=>{p(t,e,n)});else if(s(n))for(const r in n)p(t,`${e}[${r}]`,n[r]);else t.push(encodeURIComponent(e)+"="+encodeURIComponent(n));else null===n&&t.push(encodeURIComponent(e))}function d(t){const e={},n=t.split("&");let r,o;for(let t=0,i=n.length;t<i;++t)-1==(o=(r=n[t]).indexOf("="))?e[decodeURIComponent(r)]="":e[decodeURIComponent(r.slice(0,o))]=decodeURIComponent(r.slice(o+1));return e}function y(t){return/[\/+]json($|[^-\w])/.test(t)}function m(t){this.req=t,this.xhr=this.req.xhr,this.text="HEAD"!=this.req.method&&(""===this.xhr.responseType||"text"===this.xhr.responseType)||void 0===this.xhr.responseType?this.xhr.responseText:null,this.statusText=this.req.xhr.statusText;let e=this.xhr.status;1223===e&&(e=204),this._setStatusProperties(e),this.header=this.headers=function(t){const e=t.split(/\r?\n/),n={};let r,o,i,s;for(let t=0,u=e.length;t<u;++t)-1!==(r=(o=e[t]).indexOf(":"))&&(i=o.slice(0,r).toLowerCase(),s=l(o.slice(r+1)),n[i]=s);return n}(this.xhr.getAllResponseHeaders()),this.header["content-type"]=this.xhr.getResponseHeader("content-type"),this._setHeaderProperties(this.header),null===this.text&&t._responseType?this.body=this.xhr.response:this.body="HEAD"!=this.req.method?this._parseBody(this.text?this.text:this.xhr.response):null}function b(t,e){const n=this;this._query=this._query||[],this.method=t,this.url=e,this.header={},this._header={},this.on("end",()=>{let t,e=null,r=null;try{r=new m(n)}catch(t){return(e=new Error("Parser is unable to parse the response")).parse=!0,e.original=t,n.xhr?(e.rawResponse=void 0===n.xhr.responseType?n.xhr.responseText:n.xhr.response,e.status=n.xhr.status?n.xhr.status:null,e.statusCode=e.status):(e.rawResponse=null,e.status=null),n.callback(e)}n.emit("response",r);try{n._isResponseOK(r)||(t=new Error(r.statusText||"Unsuccessful HTTP response"))}catch(e){t=e}t?(t.original=e,t.response=r,t.status=r.status,n.callback(t,r)):n.callback(null,r)})}function _(t,e,n){const r=h("DELETE",t);return"function"==typeof e&&(n=e,e=null),e&&r.send(e),n&&r.end(n),r}h.serializeObject=f,h.parseString=d,h.types={html:"text/html",json:"application/json",xml:"text/xml",urlencoded:"application/x-www-form-urlencoded",form:"application/x-www-form-urlencoded","form-data":"application/x-www-form-urlencoded"},h.serialize={"application/x-www-form-urlencoded":f,"application/json":JSON.stringify},h.parse={"application/x-www-form-urlencoded":d,"application/json":JSON.parse},u(m.prototype),m.prototype._parseBody=function(t){let e=h.parse[this.type];return this.req._parser?this.req._parser(this,t):(!e&&y(this.type)&&(e=h.parse["application/json"]),e&&t&&(t.length||t instanceof Object)?e(t):null)},m.prototype.toError=function(){const t=this.req,e=t.method,n=t.url,r=`cannot ${e} ${n} (${this.status})`,o=new Error(r);return o.status=this.status,o.method=e,o.url=n,o},h.Response=m,o(b.prototype),i(b.prototype),b.prototype.type=function(t){return this.set("Content-Type",h.types[t]||t),this},b.prototype.accept=function(t){return this.set("Accept",h.types[t]||t),this},b.prototype.auth=function(t,e,n){1===arguments.length&&(e=""),"object"==typeof e&&null!==e&&(n=e,e=""),n||(n={type:"function"==typeof btoa?"basic":"auto"});return this._auth(t,e,n,t=>{if("function"==typeof btoa)return btoa(t);throw new Error("Cannot use basic auth, btoa is not a function")})},b.prototype.query=function(t){return"string"!=typeof t&&(t=f(t)),t&&this._query.push(t),this},b.prototype.attach=function(t,e,n){if(e){if(this._data)throw Error("superagent can't mix .send() and .attach()");this._getFormData().append(t,e,n||e.name)}return this},b.prototype._getFormData=function(){return this._formData||(this._formData=new r.FormData),this._formData},b.prototype.callback=function(t,e){if(this._shouldRetry(t,e))return this._retry();const n=this._callback;this.clearTimeout(),t&&(this._maxRetries&&(t.retries=this._retries-1),this.emit("error",t)),n(t,e)},b.prototype.crossDomainError=function(){const t=new Error("Request has been terminated\nPossible causes: the network is offline, Origin is not allowed by Access-Control-Allow-Origin, the page is being unloaded, etc.");t.crossDomain=!0,t.status=this.status,t.method=this.method,t.url=this.url,this.callback(t)},b.prototype.buffer=b.prototype.ca=b.prototype.agent=function(){return console.warn("This is not supported in browser version of superagent"),this},b.prototype.pipe=b.prototype.write=(()=>{throw Error("Streaming is not supported in browser version of superagent")}),b.prototype._isHost=function(t){return t&&"object"==typeof t&&!Array.isArray(t)&&"[object Object]"!==Object.prototype.toString.call(t)},b.prototype.end=function(t){this._endCalled&&console.warn("Warning: .end() was called twice. This is not supported in superagent"),this._endCalled=!0,this._callback=t||c,this._finalizeQueryString(),this._end()},b.prototype._end=function(){if(this._aborted)return this.callback(Error("The request has been aborted even before .end() was called"));const t=this,e=this.xhr=h.getXHR();let n=this._formData||this._data;this._setTimeouts(),e.onreadystatechange=(()=>{const n=e.readyState;if(n>=2&&t._responseTimeoutTimer&&clearTimeout(t._responseTimeoutTimer),4!=n)return;let r;try{r=e.status}catch(t){r=0}if(!r){if(t.timedout||t._aborted)return;return t.crossDomainError()}t.emit("end")});const r=(e,n)=>{n.total>0&&(n.percent=n.loaded/n.total*100),n.direction=e,t.emit("progress",n)};if(this.hasListeners("progress"))try{e.onprogress=r.bind(null,"download"),e.upload&&(e.upload.onprogress=r.bind(null,"upload"))}catch(t){}try{this.username&&this.password?e.open(this.method,this.url,!0,this.username,this.password):e.open(this.method,this.url,!0)}catch(t){return this.callback(t)}if(this._withCredentials&&(e.withCredentials=!0),!this._formData&&"GET"!=this.method&&"HEAD"!=this.method&&"string"!=typeof n&&!this._isHost(n)){const t=this._header["content-type"];let e=this._serializer||h.serialize[t?t.split(";")[0]:""];!e&&y(t)&&(e=h.serialize["application/json"]),e&&(n=e(n))}for(const t in this.header)null!=this.header[t]&&this.header.hasOwnProperty(t)&&e.setRequestHeader(t,this.header[t]);this._responseType&&(e.responseType=this._responseType),this.emit("request",this),e.send(void 0!==n?n:null)},h.agent=(()=>new a),["GET","POST","OPTIONS","PATCH","PUT","DELETE"].forEach(t=>{a.prototype[t.toLowerCase()]=function(e,n){const r=new h.Request(t,e);return this._setDefaults(r),n&&r.end(n),r}}),a.prototype.del=a.prototype.delete,h.get=((t,e,n)=>{const r=h("GET",t);return"function"==typeof e&&(n=e,e=null),e&&r.query(e),n&&r.end(n),r}),h.head=((t,e,n)=>{const r=h("HEAD",t);return"function"==typeof e&&(n=e,e=null),e&&r.query(e),n&&r.end(n),r}),h.options=((t,e,n)=>{const r=h("OPTIONS",t);return"function"==typeof e&&(n=e,e=null),e&&r.send(e),n&&r.end(n),r}),h.del=_,h.delete=_,h.patch=((t,e,n)=>{const r=h("PATCH",t);return"function"==typeof e&&(n=e,e=null),e&&r.send(e),n&&r.end(n),r}),h.post=((t,e,n)=>{const r=h("POST",t);return"function"==typeof e&&(n=e,e=null),e&&r.send(e),n&&r.end(n),r}),h.put=((t,e,n)=>{const r=h("PUT",t);return"function"==typeof e&&(n=e,e=null),e&&r.send(e),n&&r.end(n),r})},function(t,e,n){function r(t){if(t)return function(t){for(var e in r.prototype)t[e]=r.prototype[e];return t}(t)}t.exports=r,r.prototype.on=r.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},r.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},r.prototype.off=r.prototype.removeListener=r.prototype.removeAllListeners=r.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+t];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var o=0;o<r.length;o++)if((n=r[o])===e||n.fn===e){r.splice(o,1);break}return this},r.prototype.emit=function(t){this._callbacks=this._callbacks||{};var e=[].slice.call(arguments,1),n=this._callbacks["$"+t];if(n)for(var r=0,o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,e);return this},r.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},r.prototype.hasListeners=function(t){return!!this.listeners(t).length}},function(t,e,n){"use strict";const r=n(0);function o(t){if(t)return function(t){for(const e in o.prototype)t[e]=o.prototype[e];return t}(t)}t.exports=o,o.prototype.clearTimeout=function(){return clearTimeout(this._timer),clearTimeout(this._responseTimeoutTimer),delete this._timer,delete this._responseTimeoutTimer,this},o.prototype.parse=function(t){return this._parser=t,this},o.prototype.responseType=function(t){return this._responseType=t,this},o.prototype.serialize=function(t){return this._serializer=t,this},o.prototype.timeout=function(t){if(!t||"object"!=typeof t)return this._timeout=t,this._responseTimeout=0,this;for(const e in t)switch(e){case"deadline":this._timeout=t.deadline;break;case"response":this._responseTimeout=t.response;break;default:console.warn("Unknown timeout option",e)}return this},o.prototype.retry=function(t,e){return 0!==arguments.length&&!0!==t||(t=1),t<=0&&(t=0),this._maxRetries=t,this._retries=0,this._retryCallback=e,this};const i=["ECONNRESET","ETIMEDOUT","EADDRINFO","ESOCKETTIMEDOUT"];o.prototype._shouldRetry=function(t,e){if(!this._maxRetries||this._retries++>=this._maxRetries)return!1;if(this._retryCallback)try{const n=this._retryCallback(t,e);if(!0===n)return!0;if(!1===n)return!1}catch(t){console.error(t)}if(e&&e.status&&e.status>=500&&501!=e.status)return!0;if(t){if(t.code&&~i.indexOf(t.code))return!0;if(t.timeout&&"ECONNABORTED"==t.code)return!0;if(t.crossDomain)return!0}return!1},o.prototype._retry=function(){return this.clearTimeout(),this.req&&(this.req=null,this.req=this.request()),this._aborted=!1,this.timedout=!1,this._end()},o.prototype.then=function(t,e){if(!this._fullfilledPromise){const t=this;this._endCalled&&console.warn("Warning: superagent request was sent twice, because both .end() and .then() were called. Never call .end() if you use promises"),this._fullfilledPromise=new Promise((e,n)=>{t.on("error",n),t.end((t,r)=>{t?n(t):e(r)})})}return this._fullfilledPromise.then(t,e)},o.prototype.catch=function(t){return this.then(void 0,t)},o.prototype.use=function(t){return t(this),this},o.prototype.ok=function(t){if("function"!=typeof t)throw Error("Callback required");return this._okCallback=t,this},o.prototype._isResponseOK=function(t){return!!t&&(this._okCallback?this._okCallback(t):t.status>=200&&t.status<300)},o.prototype.get=function(t){return this._header[t.toLowerCase()]},o.prototype.getHeader=o.prototype.get,o.prototype.set=function(t,e){if(r(t)){for(const e in t)this.set(e,t[e]);return this}return this._header[t.toLowerCase()]=e,this.header[t]=e,this},o.prototype.unset=function(t){return delete this._header[t.toLowerCase()],delete this.header[t],this},o.prototype.field=function(t,e){if(null==t)throw new Error(".field(name, val) name can not be empty");if(this._data)throw new Error(".field() can't be used if .send() is used. Please use only .send() or only .field() & .attach()");if(r(t)){for(const e in t)this.field(e,t[e]);return this}if(Array.isArray(e)){for(const n in e)this.field(t,e[n]);return this}if(null==e)throw new Error(".field(name, val) val can not be empty");return"boolean"==typeof e&&(e=""+e),this._getFormData().append(t,e),this},o.prototype.abort=function(){return this._aborted?this:(this._aborted=!0,this.xhr&&this.xhr.abort(),this.req&&this.req.abort(),this.clearTimeout(),this.emit("abort"),this)},o.prototype._auth=function(t,e,n,r){switch(n.type){case"basic":this.set("Authorization",`Basic ${r(`${t}:${e}`)}`);break;case"auto":this.username=t,this.password=e;break;case"bearer":this.set("Authorization",`Bearer ${t}`)}return this},o.prototype.withCredentials=function(t){return null==t&&(t=!0),this._withCredentials=t,this},o.prototype.redirects=function(t){return this._maxRedirects=t,this},o.prototype.maxResponseSize=function(t){if("number"!=typeof t)throw TypeError("Invalid argument");return this._maxResponseSize=t,this},o.prototype.toJSON=function(){return{method:this.method,url:this.url,data:this._data,headers:this._header}},o.prototype.send=function(t){const e=r(t);let n=this._header["content-type"];if(this._formData)throw new Error(".send() can't be used if .attach() or .field() is used. Please use only .send() or only .field() & .attach()");if(e&&!this._data)Array.isArray(t)?this._data=[]:this._isHost(t)||(this._data={});else if(t&&this._data&&this._isHost(this._data))throw Error("Can't merge these send calls");if(e&&r(this._data))for(const e in t)this._data[e]=t[e];else"string"==typeof t?(n||this.type("form"),n=this._header["content-type"],this._data="application/x-www-form-urlencoded"==n?this._data?`${this._data}&${t}`:t:(this._data||"")+t):this._data=t;return!e||this._isHost(t)?this:(n||this.type("json"),this)},o.prototype.sortQuery=function(t){return this._sort=void 0===t||t,this},o.prototype._finalizeQueryString=function(){const t=this._query.join("&");if(t&&(this.url+=(this.url.indexOf("?")>=0?"&":"?")+t),this._query.length=0,this._sort){const t=this.url.indexOf("?");if(t>=0){const e=this.url.substring(t+1).split("&");"function"==typeof this._sort?e.sort(this._sort):e.sort(),this.url=this.url.substring(0,t)+"?"+e.join("&")}}},o.prototype._appendQueryString=(()=>{console.trace("Unsupported")}),o.prototype._timeoutError=function(t,e,n){if(this._aborted)return;const r=new Error(`${t+e}ms exceeded`);r.timeout=e,r.code="ECONNABORTED",r.errno=n,this.timedout=!0,this.abort(),this.callback(r)},o.prototype._setTimeouts=function(){const t=this;this._timeout&&!this._timer&&(this._timer=setTimeout(()=>{t._timeoutError("Timeout of ",t._timeout,"ETIME")},this._timeout)),this._responseTimeout&&!this._responseTimeoutTimer&&(this._responseTimeoutTimer=setTimeout(()=>{t._timeoutError("Response timeout of ",t._responseTimeout,"ETIMEDOUT")},this._responseTimeout))}},function(t,e,n){"use strict";const r=n(6);function o(t){if(t)return function(t){for(const e in o.prototype)t[e]=o.prototype[e];return t}(t)}t.exports=o,o.prototype.get=function(t){return this.header[t.toLowerCase()]},o.prototype._setHeaderProperties=function(t){const e=t["content-type"]||"";this.type=r.type(e);const n=r.params(e);for(const t in n)this[t]=n[t];this.links={};try{t.link&&(this.links=r.parseLinks(t.link))}catch(t){}},o.prototype._setStatusProperties=function(t){const e=t/100|0;this.status=this.statusCode=t,this.statusType=e,this.info=1==e,this.ok=2==e,this.redirect=3==e,this.clientError=4==e,this.serverError=5==e,this.error=(4==e||5==e)&&this.toError(),this.created=201==t,this.accepted=202==t,this.noContent=204==t,this.badRequest=400==t,this.unauthorized=401==t,this.notAcceptable=406==t,this.forbidden=403==t,this.notFound=404==t,this.unprocessableEntity=422==t}},function(t,e,n){"use strict";e.type=(t=>t.split(/ *; */).shift()),e.params=(t=>t.split(/ *; */).reduce((t,e)=>{const n=e.split(/ *= */),r=n.shift(),o=n.shift();return r&&o&&(t[r]=o),t},{})),e.parseLinks=(t=>t.split(/ *, */).reduce((t,e)=>{const n=e.split(/ *; */),r=n[0].slice(1,-1);return t[n[1].split(/ *= */)[1].slice(1,-1)]=r,t},{})),e.cleanHeader=((t,e)=>(delete t["content-type"],delete t["content-length"],delete t["transfer-encoding"],delete t.host,e&&(delete t.authorization,delete t.cookie),t))},function(t,e){function n(){this._defaults=[]}["use","on","once","set","query","type","accept","auth","withCredentials","sortQuery","retry","ok","redirects","timeout","buffer","serialize","parse","ca","key","pfx","cert"].forEach(t=>{n.prototype[t]=function(...e){return this._defaults.push({fn:t,args:e}),this}}),n.prototype._setDefaults=function(t){this._defaults.forEach(e=>{t[e.fn].apply(t,e.args)})},t.exports=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,